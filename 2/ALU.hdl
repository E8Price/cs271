CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0) equals 1, else 0

    PARTS:
      Mux16(a=x, sel=zx, out=x1);
      Not16(in=x1, out=nX);
      Mux16(a=x1, b=nX, sel=nx, out=x2);

      Mux16(a=y, sel=zy, out=y1);
      Not16(in=y1, out=nY);
      Mux16(a=y1, b=nY, sel=ny, out=y2);

      Add16(a=x2, b=y2, out=added);
      And16(a=x2, b=y2, out=xyand);
      Mux16(a=xyand, b=added, sel=f, out=result);

      Not16(in=result, out=nResult);
      Mux16(a=result, b=nResult, sel=no, out=out, out[15]=firstOut, out[0..7]=fLeft, out[8..15]=fRight);

      Or8Way(in=fLeft, out=zrl);
      Or8Way(in=fRight, out=zrr);
      Or(a=zrl, b=zrr, out=nzr);
      Not(in=nzr, out=zr);

      And(a=firstOut, b=true, out=ng);
}
