CHIP CPU {

    IN  inM[16],         
        instruction[16], 
        reset;           

    OUT outM[16],      
        writeM,        
        addressM[15],    
        pc[15];          

    PARTS:
    DMux(in=true, sel=instruction[15], a=isAType, b=isCType);
    Or(a=isAType, b=instruction[5], out=loadA);
    And(a=isCType, b=instruction[4], out=loadD);


    Mux16(a=aluOut, b=instruction, sel=isAType, out=aRegInput);
    ARegister(in=aRegInput, load=loadA, out=aRegOut, out[0..14]=addressM);

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluYInput);
    ALU(x=dRegOut, y=aluYInput, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluOut, zr=zrFlag, ng=ngFlag, out=outM);
    And(a=isCType, b=instruction[3], out=writeM);
    DRegister(in=aluOut, load=loadD, out=dRegOut);

   
    Or(a=zrFlag, b=ngFlag, out=isNotPositive);
    Not(in=isNotPositive, out=isPositive);
    And(a=instruction[0], b=isPositive, out=jumpGT);
    And(a=instruction[1], b=zrFlag, out=jumpEQ);    
    And(a=instruction[2], b=ngFlag, out=jumpLT);    
    Or(a=jumpLT, b=jumpEQ, out=jumpLE);
    Or(a=jumpGT, b=jumpLE, out=shouldJump);
    And(a=shouldJump, b=isCType, out=jumpNow);
    Not(in=jumpNow, out=incrementPC);
    PC(in=aRegOut, load=jumpNow, inc=incrementPC, reset=reset, out[0..14]=pc);
}
